/*******************************************************************************
 * Copyright (c) 2013 Michael Vorburger (http://www.vorburger.ch).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

grammar ch.vorburger.xobjects.XObjects with org.eclipse.xtext.common.Terminals // org.eclipse.xtext.xbase.Xbase

// TODO not actually needed? import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate xObjects "http://www.vorburger.ch/xobjects/XObjects"

File:
	// package is NOT to be used to determine where the *.java file will be written to - only to qualify the XObject's name (if it has any) 
	// TODO ('package' package=QualifiedName ';'?)?
	
	// TODO later test import (uncomment also below) importSection=XObjectsImportSection?
	
	// TODO later maybe suppport *.xobject (always one) and *.xobjects (with several), and see Xbase for how they have done two langs in one module, but for now keep it simple:
	//   (xobjects += XObject)*

// This class could of course alternatively and may be better also be defined in some external Preference,
// e.g. File Extension-ending based (say *.swing.xobject => com.MyXObjectSwingEditorPart),
// but having it inside as part of the Model is just the easiest, for now:
//
// 	 TODO "view with" viewer = JavaClass/Type (extends XObjectsEclipseViewer interface)

	root = XObject
;

// May be one day XObjects could be natively supported in Xtend?
XObject: // returns xbase::XExpression:
	// TODO Documentation! And add it to XObjectsJvmModelInferrer..
	NoSchemaXObject | JavaXObject | EcoreXObject
;

XValue:  // TODO needs returns XValue?
	StringValue | SignedNumberValue | DateValue | BooleanValue;

StringValue: // TODO needs returns XValue?
	{ StringValue } value=STRING;

SignedNumberValue: { SignedNumberValue } SignedNumber;
// LongValue: value=LONG;
// DoubleValue: value=DOUBLE;

DateValue: {DateValue} value=ISO8601_DateFullZulu;
BooleanValue: value?="true" |  "false" {BooleanValue};	

NoSchemaXObject : { NoSchemaXObject }
	// TODO Optional '{', if root object
	'{'
    	(features += NoSchemaFeature)*
  	'}'
;

NoSchemaFeature:
	feature = STRING // TODO Do the thing for simple ID matching the regular expression /[a-zA-Z_][a-zA-Z0-9_]+/ then it doesn't have to be single or double quoted, otherwise it does
	('=' | ':' | '=>') // TODO How-to factor out to share this rule? I tried a terminal and it didn't work..
	value = XValue
;

JavaXObject: // TODO extends NoSchemaXObject?
	"java:" type = [jvmTypes::JvmType|QualifiedName] // JvmTypeReference 
	(name = ID)? // TODO name has to be mandatory for QualifiedName stuff and Code Generator ;( ? Or, better, make the NameProvider use the eResource name - like in started to in the Generator.. 
	// The 'from' syntax is if you don't want just a "new {Type}()", but have to call some factory method..
	// TODO ("from" from = XExpression)?
	// TODO LOW enable type inference.. technically if 'from' is given, we would not have to have 'type'.. but I don't know how to do that (with correct editor support)
	'{'
    	(features += JavaFeature)*
  	'}'
;

JavaFeature:
	// TODO VERY HIGH Probably needs a scope provider? directly refer to a property/field.. how does this work in xtend for new .. => [ ?
	jFeature = [jvmTypes::JvmIdentifiableElement|ValidID]	// NOT name=ID 
	('=' | ':' | '=>') // TODO How-to factor out to share this rule? I tried a terminal and it didn't work..	
	//value = XExpression
;

/*
 * ACK: This was "strongly inspired" by Sebastian Benz's EFactory <http://code.google.com/a/eclipselabs.org/p/efactory/>
 * 
 * TODO may be actually use & integrate EFactory code here, and rename this EFactoryXObject? Get in touch with Sebastian first.. 
 */
EcoreXObject:
	"ecore:" eClass = [ecore::EClass] 
	(name = ID)?
	'{'
		(features += EcoreFeature)*
  	'}'
;

EcoreFeature:
	eFeature=[ecore::EStructuralFeature] 
	// NO (isMany?="+=" | "=")
	('=' | ':' | '=>') // TODO How-to factor out to share this rule? I tried a terminal and it didn't work..
	value=EcoreValue
;

EcoreValue:
	EcoreAttribute | EcoreReference | EcoreContainment
;

EcoreReference:
	value = [ecore::EObject]
;
	
EcoreContainment:
	value  = EcoreXObject
;

// TODO Make this more dynamic.. support custom data types easily defined in Xcore! 
EcoreAttribute:	(EcoreEnumAttribute | StringValue | BooleanValue | SignedNumberValue | DateValue | EcoreNullAttribute);
EcoreEnumAttribute: ":" value = [ecore::EEnumLiteral];

EcoreNullAttribute: value = "NULL"; // TODO support this for JavaFeature as well? What's it good for?

// ---------------------------------------------------------------------------------------
// Import support?

//// Recent Xbase has this up in Xtype already, so remove from here later when upgrading:
//XObjectsQualifiedNameWithWildCard :
//	QualifiedName  '.' '*';
//	
//XObjectsImportSection:
//		importDeclarations+=XObjectsImportDeclaration+;
//
//XObjectsImportDeclaration:
//	'import' (
//		(importedType=[types::JvmDeclaredType|QualifiedName] '.' '*') 
//		| importedType=[types::JvmDeclaredType|QualifiedName] 
//		| importedNamespace=XObjectsQualifiedNameWithWildCard) ';'?
//;

QualifiedName:
  ValidID ('.' ValidID)*;
  
ValidID:
	ID;

terminal LONG returns ecore::ELong     : ('-')?  ('0'..'9')+;
// Because Xtext Doc says "It is generally not a good idea to implement floating point literals with terminal rules. You should use data type rules instead for the above mentioned reasons."
// we don't use LONG in LongValue and DOUBLE in DoubleValue via this:
//     terminal DOUBLE returns ecore::EDouble : ('-')?  ('0'..'9')+ '.' ('0'..'9')+;
// but instead this:
SignedNumber hidden():
	('-')? (LONG) ('.' (LONG))?;

// TODO I'm not 100% sure this is correct... for e.g. 1979-05-27T07:32:00Z 
// and it will definitely need a coded value converter, @see https://www.google.ch/search?q=java+ISO8601+dates, in particular http://stackoverflow.com/questions/2201925/converting-iso8601-compliant-string-to-java-util-date; may be also check TOML implementations?
ISO8601_DateFullZulu hidden():
	INT '-' INT '-' INT 'T' INT ':' INT ':' INT 'Z';
